// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Network/P2P/Packet.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tuckfirtle.Core.Network.P2P {

  /// <summary>Holder for reflection information generated from Network/P2P/Packet.proto</summary>
  public static partial class PacketReflection {

    #region Descriptor
    /// <summary>File descriptor for Network/P2P/Packet.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhOZXR3b3JrL1AyUC9QYWNrZXQucHJvdG8aLk5ldHdvcmsvUDJQL0hlYWRl",
            "ci9QYWNrZXRDb21wcmVzc2lvblR5cGUucHJvdG8aLU5ldHdvcmsvUDJQL0hl",
            "YWRlci9QYWNrZXRFbmNyeXB0aW9uVHlwZS5wcm90bxojTmV0d29yay9QMlAv",
            "SGVhZGVyL1BhY2tldFR5cGUucHJvdG8i6wEKBlBhY2tldBIWCg5wYWNrZXRf",
            "bmV0d29yaxgBIAEoDBIiChpwYWNrZXRfa2VlcF9hbGl2ZV9kdXJhdGlvbhgC",
            "IAEoBRI3ChdwYWNrZXRfY29tcHJlc3Npb25fdHlwZRgDIAEoDjIWLlBhY2tl",
            "dENvbXByZXNzaW9uVHlwZRI1ChZwYWNrZXRfZW5jcnlwdGlvbl90eXBlGAQg",
            "ASgOMhUuUGFja2V0RW5jcnlwdGlvblR5cGUSIAoLcGFja2V0X3R5cGUYBSAB",
            "KA4yCy5QYWNrZXRUeXBlEhMKC3BhY2tldF9kYXRhGAYgASgMQh6qAhtUdWNr",
            "ZmlydGxlLkNvcmUuTmV0d29yay5QMlBiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Tuckfirtle.Core.Network.P2P.Header.PacketCompressionTypeReflection.Descriptor, global::Tuckfirtle.Core.Network.P2P.Header.PacketEncryptionTypeReflection.Descriptor, global::Tuckfirtle.Core.Network.P2P.Header.PacketTypeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tuckfirtle.Core.Network.P2P.Packet), global::Tuckfirtle.Core.Network.P2P.Packet.Parser, new[]{ "PacketNetwork", "PacketKeepAliveDuration", "PacketCompressionType", "PacketEncryptionType", "PacketType", "PacketData" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Packet : pb::IMessage<Packet> {
    private static readonly pb::MessageParser<Packet> _parser = new pb::MessageParser<Packet>(() => new Packet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Packet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tuckfirtle.Core.Network.P2P.PacketReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet(Packet other) : this() {
      packetNetwork_ = other.packetNetwork_;
      packetKeepAliveDuration_ = other.packetKeepAliveDuration_;
      packetCompressionType_ = other.packetCompressionType_;
      packetEncryptionType_ = other.packetEncryptionType_;
      packetType_ = other.packetType_;
      packetData_ = other.packetData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet Clone() {
      return new Packet(this);
    }

    /// <summary>Field number for the "packet_network" field.</summary>
    public const int PacketNetworkFieldNumber = 1;
    private pb::ByteString packetNetwork_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PacketNetwork {
      get { return packetNetwork_; }
      set {
        packetNetwork_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "packet_keep_alive_duration" field.</summary>
    public const int PacketKeepAliveDurationFieldNumber = 2;
    private int packetKeepAliveDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PacketKeepAliveDuration {
      get { return packetKeepAliveDuration_; }
      set {
        packetKeepAliveDuration_ = value;
      }
    }

    /// <summary>Field number for the "packet_compression_type" field.</summary>
    public const int PacketCompressionTypeFieldNumber = 3;
    private global::Tuckfirtle.Core.Network.P2P.Header.PacketCompressionType packetCompressionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tuckfirtle.Core.Network.P2P.Header.PacketCompressionType PacketCompressionType {
      get { return packetCompressionType_; }
      set {
        packetCompressionType_ = value;
      }
    }

    /// <summary>Field number for the "packet_encryption_type" field.</summary>
    public const int PacketEncryptionTypeFieldNumber = 4;
    private global::Tuckfirtle.Core.Network.P2P.Header.PacketEncryptionType packetEncryptionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tuckfirtle.Core.Network.P2P.Header.PacketEncryptionType PacketEncryptionType {
      get { return packetEncryptionType_; }
      set {
        packetEncryptionType_ = value;
      }
    }

    /// <summary>Field number for the "packet_type" field.</summary>
    public const int PacketTypeFieldNumber = 5;
    private global::Tuckfirtle.Core.Network.P2P.Header.PacketType packetType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tuckfirtle.Core.Network.P2P.Header.PacketType PacketType {
      get { return packetType_; }
      set {
        packetType_ = value;
      }
    }

    /// <summary>Field number for the "packet_data" field.</summary>
    public const int PacketDataFieldNumber = 6;
    private pb::ByteString packetData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PacketData {
      get { return packetData_; }
      set {
        packetData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Packet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Packet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PacketNetwork != other.PacketNetwork) return false;
      if (PacketKeepAliveDuration != other.PacketKeepAliveDuration) return false;
      if (PacketCompressionType != other.PacketCompressionType) return false;
      if (PacketEncryptionType != other.PacketEncryptionType) return false;
      if (PacketType != other.PacketType) return false;
      if (PacketData != other.PacketData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PacketNetwork.Length != 0) hash ^= PacketNetwork.GetHashCode();
      if (PacketKeepAliveDuration != 0) hash ^= PacketKeepAliveDuration.GetHashCode();
      if (PacketCompressionType != 0) hash ^= PacketCompressionType.GetHashCode();
      if (PacketEncryptionType != 0) hash ^= PacketEncryptionType.GetHashCode();
      if (PacketType != 0) hash ^= PacketType.GetHashCode();
      if (PacketData.Length != 0) hash ^= PacketData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PacketNetwork.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PacketNetwork);
      }
      if (PacketKeepAliveDuration != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PacketKeepAliveDuration);
      }
      if (PacketCompressionType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) PacketCompressionType);
      }
      if (PacketEncryptionType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) PacketEncryptionType);
      }
      if (PacketType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) PacketType);
      }
      if (PacketData.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(PacketData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PacketNetwork.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PacketNetwork);
      }
      if (PacketKeepAliveDuration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PacketKeepAliveDuration);
      }
      if (PacketCompressionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PacketCompressionType);
      }
      if (PacketEncryptionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PacketEncryptionType);
      }
      if (PacketType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PacketType);
      }
      if (PacketData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PacketData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Packet other) {
      if (other == null) {
        return;
      }
      if (other.PacketNetwork.Length != 0) {
        PacketNetwork = other.PacketNetwork;
      }
      if (other.PacketKeepAliveDuration != 0) {
        PacketKeepAliveDuration = other.PacketKeepAliveDuration;
      }
      if (other.PacketCompressionType != 0) {
        PacketCompressionType = other.PacketCompressionType;
      }
      if (other.PacketEncryptionType != 0) {
        PacketEncryptionType = other.PacketEncryptionType;
      }
      if (other.PacketType != 0) {
        PacketType = other.PacketType;
      }
      if (other.PacketData.Length != 0) {
        PacketData = other.PacketData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PacketNetwork = input.ReadBytes();
            break;
          }
          case 16: {
            PacketKeepAliveDuration = input.ReadInt32();
            break;
          }
          case 24: {
            PacketCompressionType = (global::Tuckfirtle.Core.Network.P2P.Header.PacketCompressionType) input.ReadEnum();
            break;
          }
          case 32: {
            PacketEncryptionType = (global::Tuckfirtle.Core.Network.P2P.Header.PacketEncryptionType) input.ReadEnum();
            break;
          }
          case 40: {
            PacketType = (global::Tuckfirtle.Core.Network.P2P.Header.PacketType) input.ReadEnum();
            break;
          }
          case 50: {
            PacketData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
